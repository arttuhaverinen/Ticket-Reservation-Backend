services:
  webapp:
    image: busapp
    build:
      context: ./backend # Path to the backend folder
      dockerfile: Dockerfile # Dockerfile inside the backend folder
    env_file:
      - ./backend/.env # Specify the path to the .env file
    ports:
      - "5001:5001"
    #volumes:
    #  - ./backend:/app # Mount the backend folder to the /app directory in the container
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      DEV_ELASTICSEARCH_URI: "http://elasticsearch:9200"

    volumes:
      - ./backend:/app # Mount your local code into the container
    #networks:
    #  - busapp-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  #  networks:
  #    - busapp-network
  dev-minio:
    image: minio/minio:latest # Specify the MinIO image and tag here
    container_name: minio
    env_file:
      - ./backend/.env # Specify the path to the .env file
    environment:
      # Set up root user credentials here
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000" # MinIO API port
      - "9001:9001" # MinIO web console port
    volumes:
      - minio-data:/data # Persist data across restarts
    #entrypoint: /bin/sh -c "until curl -s http://minio:9000/minio/health/live; do sleep 2; done && mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && mc mb myminio/test && minio server /data --console-address ':9001'"
    command: server /data --console-address ":9001"
    #networks:
    #  - busapp-network
  client:
    build: ./frontend
    ports:
      - "5173:5173"
    #    volumes:
    #      - ./backend/wwwroot:/app/dist
    volumes:
      - ./frontend:/app # Mount the frontend code directory into the container
    #  - /app/node_modules # Prevent overwriting node_modules in container with local version
    command: npm run dev
    environment:
      - VITE_MINIO_URL=http://dev-minio:9000 # React app talks directly to MinIO

  #Elasticsearch 7.10.2

  elasticsearch:
    #image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Disable all security features
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data # Persist Elasticsearch data
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -E '"status":"(green|yellow)"'
      interval: 20s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Use HTTP for development
    ports:
      - 5601:5601 # Expose Kibana UI on port 5601
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy
  postgres:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "5050:80" # Map 5050 on host to 80 inside the container
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - pgadmin-data:/var/lib/pgadmin
volumes:
  minio-data:
  elasticsearch_data:
  pgadmin-data:
  postgres_data:
#networks:
#  busapp-network:
#    driver: bridge
